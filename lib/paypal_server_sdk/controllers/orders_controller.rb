# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # OrdersController
  class OrdersController < BaseController
    # Creates an order. Merchants and partners can add Level 2 and 3 data to
    # payments to reduce risk and payment processing costs. For more information
    # about processing payments, see checkout or multiparty checkout. Note: For
    # error handling and troubleshooting, see Orders v2 errors.
    # @param [OrderRequest] body Required parameter: Example:
    # @param [String] paypal_mock_response Optional parameter: PayPal's REST API
    # uses a request header to invoke negative testing in the sandbox. This
    # header configures the sandbox into a negative testing state for
    # transactions that include the merchant.
    # @param [String] paypal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager. It is mandatory for all single-step
    # create order calls (E.g. Create Order Request with payment source
    # information like Card, PayPal.vault_id, PayPal.billing_agreement_id,
    # etc).
    # @param [String] paypal_partner_attribution_id Optional parameter:
    # Example:
    # @param [String] paypal_client_metadata_id Optional parameter: Example:
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value is: return=minimal. The
    # server returns a minimal response to optimize communication between the
    # API caller and the server. A minimal response includes the id, status and
    # HATEOAS links. return=representation. The server returns a complete
    # resource representation, including the current state of the resource.
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def create_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter(options['paypal_mock_response'], key: 'PayPal-Mock-Response'))
                   .header_param(new_parameter(options['paypal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['paypal_partner_attribution_id'], key: 'PayPal-Partner-Attribution-Id'))
                   .header_param(new_parameter(options['paypal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Shows details for an order, by ID. Note: For error handling and
    # troubleshooting, see Orders v2 errors.
    # @param [String] id Required parameter: The ID of the order for which to
    # show details.
    # @param [String] paypal_mock_response Optional parameter: PayPal's REST API
    # uses a request header to invoke negative testing in the sandbox. This
    # header configures the sandbox into a negative testing state for
    # transactions that include the merchant.
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [String] fields Optional parameter: A comma-separated list of
    # fields that should be returned for the order. Valid filter field is
    # `payment_source`.
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def get_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v2/checkout/orders/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter(options['paypal_mock_response'], key: 'PayPal-Mock-Response'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .query_param(new_parameter(options['fields'], key: 'fields'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .is_api_response(true)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Updates an order with a `CREATED` or `APPROVED` status. You cannot update
    # an order with the `COMPLETED` status. To make an update, you must provide
    # a `reference_id`. If you omit this value with an order that contains only
    # one purchase unit, PayPal sets the value to `default` which enables you to
    # use the path:
    # \"/purchase_units/@reference_id=='default'/{attribute-or-object}\".
    # Merchants and partners can add Level 2 and 3 data to payments to reduce
    # risk and payment processing costs. For more information about processing
    # payments, see checkout or multiparty checkout. Note: For error handling
    # and troubleshooting, see Orders v2 errors. Patchable attributes or
    # objects: Attribute Op Notes intent replace payer replace, add Using
    # replace op for payer will replace the whole payer object with the value
    # sent in request. purchase_units replace, add purchase_units[].custom_id
    # replace, add, remove purchase_units[].description replace, add, remove
    # purchase_units[].payee.email replace purchase_units[].shipping.name
    # replace, add purchase_units[].shipping.email_address replace, add
    # purchase_units[].shipping.phone_number replace, add
    # purchase_units[].shipping.options replace, add
    # purchase_units[].shipping.address replace, add
    # purchase_units[].shipping.type replace, add
    # purchase_units[].soft_descriptor replace, remove purchase_units[].amount
    # replace purchase_units[].items replace, add, remove
    # purchase_units[].invoice_id replace, add, remove
    # purchase_units[].payment_instruction replace
    # purchase_units[].payment_instruction.disbursement_mode replace By default,
    # disbursement_mode is INSTANT.
    # purchase_units[].payment_instruction.payee_receivable_fx_rate_id replace,
    # add, remove purchase_units[].payment_instruction.platform_fees replace,
    # add, remove purchase_units[].supplementary_data.airline replace, add,
    # remove purchase_units[].supplementary_data.card replace, add, remove
    # application_context.client_configuration replace, add
    # @param [String] id Required parameter: The ID of the order to update.
    # @param [String] paypal_mock_response Optional parameter: PayPal's REST API
    # uses a request header to invoke negative testing in the sandbox. This
    # header configures the sandbox into a negative testing state for
    # transactions that include the merchant.
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [Array[Patch]] body Optional parameter: Example:
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def patch_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/v2/checkout/orders/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['paypal_mock_response'], key: 'PayPal-Mock-Response'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Payer confirms their intent to pay for the the Order with the given
    # payment source.
    # @param [String] id Required parameter: The ID of the order for which the
    # payer confirms their intent to pay.
    # @param [String] paypal_client_metadata_id Optional parameter: Example:
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value is: return=minimal. The
    # server returns a minimal response to optimize communication between the
    # API caller and the server. A minimal response includes the id, status and
    # HATEOAS links. return=representation. The server returns a complete
    # resource representation, including the current state of the resource.
    # @param [ConfirmOrderRequest] body Optional parameter: Example:
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def confirm_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/confirm-payment-source',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['paypal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Authorizes payment for an order. To successfully authorize payment for an
    # order, the buyer must first approve the order or a valid payment_source
    # must be provided in the request. A buyer can approve the order upon being
    # redirected to the rel:approve URL that was returned in the HATEOAS links
    # in the create order response. Note: For error handling and
    # troubleshooting, see Orders v2 errors.
    # @param [String] id Required parameter: The ID of the order for which to
    # authorize.
    # @param [String] paypal_mock_response Optional parameter: PayPal's REST API
    # uses a request header to invoke negative testing in the sandbox. This
    # header configures the sandbox into a negative testing state for
    # transactions that include the merchant.
    # @param [String] paypal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager. It is mandatory for all single-step
    # create order calls (E.g. Create Order Request with payment source
    # information like Card, PayPal.vault_id, PayPal.billing_agreement_id,
    # etc).
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value is: return=minimal. The
    # server returns a minimal response to optimize communication between the
    # API caller and the server. A minimal response includes the id, status and
    # HATEOAS links. return=representation. The server returns a complete
    # resource representation, including the current state of the resource.
    # @param [String] paypal_client_metadata_id Optional parameter: Example:
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [OrderAuthorizeRequest] body Optional parameter: Example:
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def authorize_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/authorize',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['paypal_mock_response'], key: 'PayPal-Mock-Response'))
                   .header_param(new_parameter(options['paypal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter(options['paypal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(OrderAuthorizeResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('403',
                                 'The authorized payment failed due to insufficient permissions'\
                                  '.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Captures payment for an order. To successfully capture payment for an
    # order, the buyer must first approve the order or a valid payment_source
    # must be provided in the request. A buyer can approve the order upon being
    # redirected to the rel:approve URL that was returned in the HATEOAS links
    # in the create order response. Note: For error handling and
    # troubleshooting, see Orders v2 errors.
    # @param [String] id Required parameter: The ID of the order for which to
    # capture a payment.
    # @param [String] paypal_mock_response Optional parameter: PayPal's REST API
    # uses a request header to invoke negative testing in the sandbox. This
    # header configures the sandbox into a negative testing state for
    # transactions that include the merchant.
    # @param [String] paypal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager. It is mandatory for all single-step
    # create order calls (E.g. Create Order Request with payment source
    # information like Card, PayPal.vault_id, PayPal.billing_agreement_id,
    # etc).
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value is: return=minimal. The
    # server returns a minimal response to optimize communication between the
    # API caller and the server. A minimal response includes the id, status and
    # HATEOAS links. return=representation. The server returns a complete
    # resource representation, including the current state of the resource.
    # @param [String] paypal_client_metadata_id Optional parameter: Example:
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [OrderCaptureRequest] body Optional parameter: Example:
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def capture_order(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/capture',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['paypal_mock_response'], key: 'PayPal-Mock-Response'))
                   .header_param(new_parameter(options['paypal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter(options['paypal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('403',
                                 'The authorized payment failed due to insufficient permissions'\
                                  '.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Adds tracking information for an Order.
    # @param [String] id Required parameter: The ID of the order that the
    # tracking information is associated with.
    # @param [OrderTrackerRequest] body Required parameter: Example:
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def create_order_tracking(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/track',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Updates or cancels the tracking information for a PayPal order, by ID.
    # Updatable attributes or objects: Attribute Op Notes items replace Using
    # replace op for items will replace the entire items object with the value
    # sent in request. notify_payer replace, add status replace Only patching
    # status to CANCELLED is currently supported.
    # @param [String] id Required parameter: The ID of the order that the
    # tracking information is associated with.
    # @param [String] tracker_id Required parameter: The order tracking ID.
    # @param [String] paypal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see PayPal-Auth-Assertion.
    # @param [Array[Patch]] body Optional parameter: Example:
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def update_order_tracking(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/v2/checkout/orders/{id}/trackers/{tracker_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(options['tracker_id'], key: 'tracker_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['paypal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end
  end
end
