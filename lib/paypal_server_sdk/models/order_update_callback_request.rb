# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # Shipping Options Callback request. This will be implemented by the
  # merchants.
  class OrderUpdateCallbackRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the order.
    # @return [String]
    attr_accessor :id

    # The portable international postal address. Maps to
    # [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/
    # wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    # the autocomplete
    # attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-co
    # ntrols-the-autocomplete-attribute).
    # @return [OrderUpdateCallbackShippingAddress]
    attr_accessor :shipping_address

    # The options that the payee or merchant offers to the payer to ship or pick
    # up their items.
    # @return [OrderUpdateCallbackShippingOption]
    attr_accessor :shipping_option

    # An array of purchase units. At present only 1 purchase_unit is supported.
    # Each purchase unit establishes a contract between a payer and the payee.
    # Each purchase unit represents either a full or partial order that the
    # payer intends to purchase from the payee.
    # @return [Array[PurchaseUnitRequest]]
    attr_accessor :purchase_units

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['shipping_address'] = 'shipping_address'
      @_hash['shipping_option'] = 'shipping_option'
      @_hash['purchase_units'] = 'purchase_units'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        shipping_option
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(shipping_address:, purchase_units:, id: SKIP,
                   shipping_option: SKIP)
      @id = id unless id == SKIP
      @shipping_address = shipping_address
      @shipping_option = shipping_option unless shipping_option == SKIP
      @purchase_units = purchase_units
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      shipping_address = OrderUpdateCallbackShippingAddress.from_hash(hash['shipping_address']) if
        hash['shipping_address']
      # Parameter is an array, so we need to iterate through it
      purchase_units = nil
      unless hash['purchase_units'].nil?
        purchase_units = []
        hash['purchase_units'].each do |structure|
          purchase_units << (PurchaseUnitRequest.from_hash(structure) if structure)
        end
      end

      purchase_units = nil unless hash.key?('purchase_units')
      id = hash.key?('id') ? hash['id'] : SKIP
      shipping_option = OrderUpdateCallbackShippingOption.from_hash(hash['shipping_option']) if
        hash['shipping_option']

      # Create object from extracted values.
      OrderUpdateCallbackRequest.new(shipping_address: shipping_address,
                                     purchase_units: purchase_units,
                                     id: id,
                                     shipping_option: shipping_option)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, shipping_address: #{@shipping_address}, shipping_option:"\
      " #{@shipping_option}, purchase_units: #{@purchase_units}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, shipping_address: #{@shipping_address.inspect},"\
      " shipping_option: #{@shipping_option.inspect}, purchase_units: #{@purchase_units.inspect}>"
    end
  end
end
