# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # The pricing scheme details.
  class PricingScheme < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :price

    # The pricing model for the billing cycle.
    # @return [PricingModel]
    attr_accessor :pricing_model

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :reload_threshold_amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['price'] = 'price'
      @_hash['pricing_model'] = 'pricing_model'
      @_hash['reload_threshold_amount'] = 'reload_threshold_amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        price
        reload_threshold_amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(pricing_model:, price: SKIP, reload_threshold_amount: SKIP)
      @price = price unless price == SKIP
      @pricing_model = pricing_model
      @reload_threshold_amount = reload_threshold_amount unless reload_threshold_amount == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pricing_model = hash.key?('pricing_model') ? hash['pricing_model'] : nil
      price = Money.from_hash(hash['price']) if hash['price']
      reload_threshold_amount = Money.from_hash(hash['reload_threshold_amount']) if
        hash['reload_threshold_amount']

      # Create object from extracted values.
      PricingScheme.new(pricing_model: pricing_model,
                        price: price,
                        reload_threshold_amount: reload_threshold_amount)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} price: #{@price}, pricing_model: #{@pricing_model},"\
      " reload_threshold_amount: #{@reload_threshold_amount}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} price: #{@price.inspect}, pricing_model: #{@pricing_model.inspect},"\
      " reload_threshold_amount: #{@reload_threshold_amount.inspect}>"
    end
  end
end
