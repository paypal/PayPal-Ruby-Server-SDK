# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # This would contain shipping option and amount data at purchase unit level.
  class ShippingOptionsPurchaseUnit < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The API caller-provided external ID for the purchase unit. Required for
    # multiple purchase units when you must update the order through `PATCH`. If
    # you omit this value and the order contains only one purchase unit, PayPal
    # sets this value to `default`. Note: If there are multiple purchase units,
    # reference_id is required for each purchase unit.
    # @return [String]
    attr_accessor :reference_id

    # The total order amount with an optional breakdown that provides details,
    # such as the total item amount, total tax amount, shipping, handling,
    # insurance, and discounts, if any. If you specify `amount.breakdown`, the
    # amount equals `item_total` plus `tax_total` plus `shipping` plus
    # `handling` plus `insurance` minus `shipping_discount` minus discount. The
    # amount must be a positive number. For listed of supported currencies and
    # decimal precision, see the PayPal REST APIs Currency Codes.
    # @return [AmountWithBreakdown]
    attr_accessor :amount

    # An array of shipping options that the payee or merchant offers to the
    # payer to ship or pick up their items.
    # @return [Array[ShippingOption]]
    attr_accessor :shipping_options

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reference_id'] = 'reference_id'
      @_hash['amount'] = 'amount'
      @_hash['shipping_options'] = 'shipping_options'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reference_id
        amount
        shipping_options
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(reference_id: SKIP, amount: SKIP, shipping_options: SKIP)
      @reference_id = reference_id unless reference_id == SKIP
      @amount = amount unless amount == SKIP
      @shipping_options = shipping_options unless shipping_options == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reference_id = hash.key?('reference_id') ? hash['reference_id'] : SKIP
      amount = AmountWithBreakdown.from_hash(hash['amount']) if hash['amount']
      # Parameter is an array, so we need to iterate through it
      shipping_options = nil
      unless hash['shipping_options'].nil?
        shipping_options = []
        hash['shipping_options'].each do |structure|
          shipping_options << (ShippingOption.from_hash(structure) if structure)
        end
      end

      shipping_options = SKIP unless hash.key?('shipping_options')

      # Create object from extracted values.
      ShippingOptionsPurchaseUnit.new(reference_id: reference_id,
                                      amount: amount,
                                      shipping_options: shipping_options)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} reference_id: #{@reference_id}, amount: #{@amount}, shipping_options:"\
      " #{@shipping_options}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} reference_id: #{@reference_id.inspect}, amount: #{@amount.inspect},"\
      " shipping_options: #{@shipping_options.inspect}>"
    end
  end
end
