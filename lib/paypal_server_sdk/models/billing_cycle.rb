# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # The billing cycle providing details of the billing frequency, amount,
  # duration and if the billing cycle is a free, discounted or regular billing
  # cycle. The sequence of the billing cycle will be in the following order -
  # free trial billing cycle(s), discounted trial billing cycle(s), regular
  # billing cycle(s).
  class BillingCycle < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The tenure type of the billing cycle identifies if the billing cycle is a
    # trial(free or discounted) or regular billing cycle.
    # @return [TenureType]
    attr_accessor :tenure_type

    # The pricing scheme details.
    # @return [PricingScheme]
    attr_accessor :pricing_scheme

    # The frequency details for this billing cycle.
    # @return [Object]
    attr_accessor :frequency

    # The number of times this billing cycle gets executed. Trial billing cycles
    # can only be executed a finite number of times (value between 1 and 999 for
    # total_cycles). Regular billing cycles can be executed infinite times
    # (value of 0 for total_cycles) or a finite number of times (value between 1
    # and 999 for total_cycles).
    # @return [Integer]
    attr_accessor :total_cycles

    # The order in which this cycle is to run among other billing cycles. For
    # example, a trial billing cycle has a `sequence` of `1` while a regular
    # billing cycle has a `sequence` of `2`, so that trial cycle runs before the
    # regular cycle.
    # @return [Integer]
    attr_accessor :sequence

    # The stand-alone date, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent
    # special legal values, such as a date of birth, you should use dates with
    # no associated time or time-zone data. Whenever possible, use the standard
    # `date_time` type. This regular expression does not validate all dates. For
    # example, February 31 is valid and nothing is known about leap years.
    # @return [String]
    attr_accessor :start_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tenure_type'] = 'tenure_type'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['frequency'] = 'frequency'
      @_hash['total_cycles'] = 'total_cycles'
      @_hash['sequence'] = 'sequence'
      @_hash['start_date'] = 'start_date'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        pricing_scheme
        frequency
        total_cycles
        sequence
        start_date
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(tenure_type:, pricing_scheme: SKIP, frequency: SKIP,
                   total_cycles: 1, sequence: 1, start_date: SKIP)
      @tenure_type = tenure_type
      @pricing_scheme = pricing_scheme unless pricing_scheme == SKIP
      @frequency = frequency unless frequency == SKIP
      @total_cycles = total_cycles unless total_cycles == SKIP
      @sequence = sequence unless sequence == SKIP
      @start_date = start_date unless start_date == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tenure_type = hash.key?('tenure_type') ? hash['tenure_type'] : nil
      pricing_scheme = PricingScheme.from_hash(hash['pricing_scheme']) if hash['pricing_scheme']
      frequency = hash.key?('frequency') ? hash['frequency'] : SKIP
      total_cycles = hash['total_cycles'] ||= 1
      sequence = hash['sequence'] ||= 1
      start_date = hash.key?('start_date') ? hash['start_date'] : SKIP

      # Create object from extracted values.
      BillingCycle.new(tenure_type: tenure_type,
                       pricing_scheme: pricing_scheme,
                       frequency: frequency,
                       total_cycles: total_cycles,
                       sequence: sequence,
                       start_date: start_date)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} tenure_type: #{@tenure_type}, pricing_scheme: #{@pricing_scheme},"\
      " frequency: #{@frequency}, total_cycles: #{@total_cycles}, sequence: #{@sequence},"\
      " start_date: #{@start_date}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} tenure_type: #{@tenure_type.inspect}, pricing_scheme:"\
      " #{@pricing_scheme.inspect}, frequency: #{@frequency.inspect}, total_cycles:"\
      " #{@total_cycles.inspect}, sequence: #{@sequence.inspect}, start_date:"\
      " #{@start_date.inspect}>"
    end
  end
end
