# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # The error details. Required for client-side `4XX` errors.
  class OrderUpdateCallbackErrorResponseDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The field that caused the error. If this field is in the body, set this
    # value to the field's JSON pointer value. Required for client-side errors.
    # @return [String]
    attr_accessor :field

    # The value of the field that caused the error.
    # @return [String]
    attr_accessor :value

    # The unique, fine-grained application-level error code.
    # @return [String]
    attr_accessor :issue

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['field'] = 'field'
      @_hash['value'] = 'value'
      @_hash['issue'] = 'issue'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        field
        value
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(issue:, field: SKIP, value: SKIP)
      @field = field unless field == SKIP
      @value = value unless value == SKIP
      @issue = issue
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      issue = hash.key?('issue') ? hash['issue'] : nil
      field = hash.key?('field') ? hash['field'] : SKIP
      value = hash.key?('value') ? hash['value'] : SKIP

      # Create object from extracted values.
      OrderUpdateCallbackErrorResponseDetails.new(issue: issue,
                                                  field: field,
                                                  value: value)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} field: #{@field}, value: #{@value}, issue: #{@issue}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} field: #{@field.inspect}, value: #{@value.inspect}, issue:"\
      " #{@issue.inspect}>"
    end
  end
end
