# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # The error details.
  class OrderUpdateCallbackErrorResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The human-readable, unique name of the error.
    # @return [String]
    attr_accessor :name

    # The message that describes the error.
    # @return [String]
    attr_accessor :message

    # An array of additional details about the error.
    # @return [Array[OrderUpdateCallbackErrorResponseDetails]]
    attr_accessor :details

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['message'] = 'message'
      @_hash['details'] = 'details'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        message
        details
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name:, message: SKIP, details: SKIP)
      @name = name
      @message = message unless message == SKIP
      @details = details unless details == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      message = hash.key?('message') ? hash['message'] : SKIP
      # Parameter is an array, so we need to iterate through it
      details = nil
      unless hash['details'].nil?
        details = []
        hash['details'].each do |structure|
          details << (OrderUpdateCallbackErrorResponseDetails.from_hash(structure) if structure)
        end
      end

      details = SKIP unless hash.key?('details')

      # Create object from extracted values.
      OrderUpdateCallbackErrorResponse.new(name: name,
                                           message: message,
                                           details: details)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, message: #{@message}, details: #{@details}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, message: #{@message.inspect}, details:"\
      " #{@details.inspect}>"
    end
  end
end
