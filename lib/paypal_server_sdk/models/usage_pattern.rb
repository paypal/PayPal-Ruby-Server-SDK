# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # Expected business/pricing model for the billing agreement., Expected
  # business/charge model for the billing agreement.
  class UsagePattern
    USAGE_PATTERN = [
      # On-demand instant payments â€“ non-recurring, pre-paid, variable amount,
      # variable frequency.
      IMMEDIATE = 'IMMEDIATE'.freeze,

      # Pay after use, non-recurring post-paid, variable amount, irregular
      # frequency.
      DEFERRED = 'DEFERRED'.freeze,

      # Pay upfront fixed or variable amount on a fixed date before the
      # goods/service is delivered.
      RECURRING_PREPAID = 'RECURRING_PREPAID'.freeze,

      # Pay on a fixed date based on usage or consumption after the
      # goods/service is delivered.
      RECURRING_POSTPAID = 'RECURRING_POSTPAID'.freeze,

      # Charge payer when the set amount is reached or monthly billing cycle,
      # whichever comes first, before the goods/service is delivered.
      THRESHOLD_PREPAID = 'THRESHOLD_PREPAID'.freeze,

      # Charge payer when the set amount is reached or monthly billing cycle,
      # whichever comes first, after the goods/service is delivered.
      THRESHOLD_POSTPAID = 'THRESHOLD_POSTPAID'.freeze,

      # Subscription plan where the "amount due" and the "billing frequency" are
      # fixed, and there is no defined duration with the payment due before the
      # good/service is delivered.
      SUBSCRIPTION_PREPAID = 'SUBSCRIPTION_PREPAID'.freeze,

      # Subscription plan where the "amount due" and the "billing frequency" are
      # fixed, and there is no defined duration with the payment due after the
      # goods/services are delivered.
      SUBSCRIPTION_POSTPAID = 'SUBSCRIPTION_POSTPAID'.freeze,

      # Unscheduled card on file plan where the merchant can bill buyer upfront
      # based on an agreed logic, but "amount due" and "frequency" can vary.
      # Inclusive of automatic reload plans.
      UNSCHEDULED_PREPAID = 'UNSCHEDULED_PREPAID'.freeze,

      # Unscheduled card on file plan where the merchant can bill buyer based on
      # an agreed logic, but "amount due" and "frequency" can vary. Inclusive of
      # automatic reload plans.
      UNSCHEDULED_POSTPAID = 'UNSCHEDULED_POSTPAID'.freeze,

      # Merchant-managed installment plan when the "amount" to be paid and the
      # "billing frequency" are fixed, but there is a defined number of payments
      # with the payment due before the good/service is delivered.
      INSTALLMENT_PREPAID = 'INSTALLMENT_PREPAID'.freeze,

      # Merchant-managed installment plan when the "amount" to be paid and the
      # "billing frequency" are fixed, but there is a defined number of payments
      # with the payment due after the goods/services are delivered.
      INSTALLMENT_POSTPAID = 'INSTALLMENT_POSTPAID'.freeze
    ].freeze

    def self.validate(value)
      return false if value.nil?

      true
    end
  end
end
