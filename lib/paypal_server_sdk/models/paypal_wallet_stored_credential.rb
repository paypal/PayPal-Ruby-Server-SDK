# paypal_server_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PaypalServerSdk
  # Provides additional details to process a payment using the PayPal wallet
  # billing agreement or a vaulted payment method that has been stored or is
  # intended to be stored.
  class PaypalWalletStoredCredential < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The person or party who initiated or triggered the payment.
    # @return [PaymentInitiator]
    attr_accessor :payment_initiator

    # Expected business/pricing model for the billing agreement.
    # @return [UsagePattern]
    attr_accessor :charge_pattern

    # Expected business/pricing model for the billing agreement.
    # @return [UsagePattern]
    attr_accessor :usage_pattern

    # Indicates if this is a `first` or `subsequent` payment using a stored
    # payment source (also referred to as stored credential or card on file).
    # @return [StoredPaymentSourceUsageType]
    attr_accessor :usage

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment_initiator'] = 'payment_initiator'
      @_hash['charge_pattern'] = 'charge_pattern'
      @_hash['usage_pattern'] = 'usage_pattern'
      @_hash['usage'] = 'usage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        charge_pattern
        usage_pattern
        usage
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payment_initiator:, charge_pattern: SKIP,
                   usage_pattern: SKIP,
                   usage: StoredPaymentSourceUsageType::DERIVED)
      @payment_initiator = payment_initiator
      @charge_pattern = charge_pattern unless charge_pattern == SKIP
      @usage_pattern = usage_pattern unless usage_pattern == SKIP
      @usage = usage unless usage == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payment_initiator =
        hash.key?('payment_initiator') ? hash['payment_initiator'] : nil
      charge_pattern =
        hash.key?('charge_pattern') ? hash['charge_pattern'] : SKIP
      usage_pattern = hash.key?('usage_pattern') ? hash['usage_pattern'] : SKIP
      usage = hash['usage'] ||= StoredPaymentSourceUsageType::DERIVED

      # Create object from extracted values.
      PaypalWalletStoredCredential.new(payment_initiator: payment_initiator,
                                       charge_pattern: charge_pattern,
                                       usage_pattern: usage_pattern,
                                       usage: usage)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_initiator: #{@payment_initiator}, charge_pattern:"\
      " #{@charge_pattern}, usage_pattern: #{@usage_pattern}, usage: #{@usage}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_initiator: #{@payment_initiator.inspect}, charge_pattern:"\
      " #{@charge_pattern.inspect}, usage_pattern: #{@usage_pattern.inspect}, usage:"\
      " #{@usage.inspect}>"
    end
  end
end
