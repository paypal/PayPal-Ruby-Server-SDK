# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v3.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PaymentsControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.payments
  end

  def test_get_authorization_404_status_code
    exception = assert_raises ErrorException do
      @controller.authorizations_get('id0')
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json;charset=UTF-8'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_get_capture_refund_404_status_code
    request = {
      'capture_id' => 'id0',
      'pay_pal_request_id' => '',
      'prefer' => 'return=minimal'
    }

    exception = assert_raises ErrorException do
      @controller.captures_refund(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_get_refund_request_404_status_code
    exception = assert_raises ErrorException do
      @controller.refunds_get('id0')
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_capture_authorization_404_status_code
    request = {
      'authorization_id' => 'id0',
      'prefer' => 'return=minimal',
      'body' => CaptureRequest.new(final_capture: false)
    }

    exception = assert_raises ErrorException do
      @controller.authorizations_capture(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json;charset=UTF-8'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_reauthorization_404_status_code
    request = {
      'authorization_id' => 'id0',
      'prefer' => 'return=minimal'
    }

    exception = assert_raises ErrorException do
      @controller.authorizations_reauthorize(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json;charset=UTF-8'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_authorization_void_404_status_code
    request = {
      'authorization_id' => 'id0',
      'prefer' => 'return=minimal'
    }

    exception = assert_raises ErrorException do
      @controller.authorizations_void(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_capture_refund_404_status_code
    request = {
      'capture_id' => 'id0',
      'pay_pal_request_id' => '',
      'prefer' => 'return=minimal',
      'body' => RefundRequest.new(
        amount: Money.new(currency_code: 'USD', value: '1.44'),
        note_to_payer: 'Defective product')
    }

    exception = assert_raises ErrorException do
      @controller.captures_refund(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end
end