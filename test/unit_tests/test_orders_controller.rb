# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v3.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class OrdersControllerTest < ControllerTestBase

  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.orders
  end

  def test_create_order_400_status_code
    request = {
      'body' => OrderRequest.new(
        intent: CheckoutPaymentIntent::CAPTURE,
        purchase_units: []
      ),
      'pay_pal_request_id' => '',
      'pay_pal_partner_attribution_id' => 'PayPal-Partner-Attribution-Id',
      'pay_pal_client_metadata_id' => 'PayPal-Client-Metadata-Id',
      'prefer' => 'return=minimal'
    }

    exception = assert_raises ErrorException do
      @controller.orders_create(request)
    end

    refute_nil(exception.response)
    assert_equal(400, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_patch_order_404_status_code
    request = {
      'id' => 'id0',
      'body' => [
        Patch.new(op: PatchOp::ADD)
      ]
    }
    exception = assert_raises ErrorException do
      @controller.orders_patch(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_confirm_order_404_status_code
    request = {
      'id' => 'id0',
      'body' => ConfirmOrderRequest.new(
        payment_source: PaymentSource.new(paypal: PayPalWallet.new)
      ),
      'prefer' => 'return=minimal'
    }
    exception = assert_raises ErrorException do
      @controller.orders_confirm(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_authorize_order_404_status_code
    request = {
      'id' => 'id0',
      'prefer' => 'return=minimal'
    }
    exception = assert_raises ErrorException do
      @controller.orders_authorize(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_create_order_track_400_status_code
    request = {
      'id' => 'id0',
      'body' => OrderTrackerRequest.new(capture_id: 'id0', notify_payer: false),
      'prefer' => 'return=minimal'
    }
    exception = assert_raises ErrorException do
      @controller.orders_track_create(request)
    end

    refute_nil(exception.response)
    assert_equal(400, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_patch_order_tracker_404_status_code
    request = {
      'id' => 'id0',
      'tracker_id' => 'id0',
      'body' => [
        Patch.new(
          op: PatchOp::REPLACE,
          path: '/notify_payer',
          value: true)
      ]
    }
    exception = assert_raises ErrorException do
      @controller.orders_trackers_patch(request)
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

  def test_get_order_404_status_code

    exception = assert_raises ErrorException do
      @controller.orders_get({ 'id' => 'id0' })
    end

    refute_nil(exception.response)
    assert_equal(404, exception.response_code)

    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, exception.response.headers))
  end

end